Parallels Desktop for Mac v16.1.3 Shared Folders Directory Traversal Vulnerability & Advanced Exploitation

This writeup describes a zero day VM escape vulnerability in Parallels Desktop v16.1.3 and how to attack it.


	Vulnerability

Parallels Desktop v16.1.3 and earlier fails to properly sanitize the Parallels Shared Folders operations. The vulnerability allows a Guest OS user with root privileges to perform a directory traversal attack on a shared folder exposed to the Guest OS, and plant an arbitrary executable binary on the host OS. Due to specifics of Mac OS, if the shared folder is located in the user's home directory (/Users/username/...), the planted binary can be automatically launched in many scenarios, leading to arbitrary code execution on the Host OS. 

The Shared Folders functionality in Parallels Desktop is implemented with a paravirtualized split driver model on top of the hypercall interface named Parallels Toolgate. On the guest OS (Linux for this writeup) Shared Folders functionality is provided by the prl_fs.ko driver of Parallels Tools. prl_fs is a Linux VFS driver which translates the Linux kernel filesystem operations related to the mounted remote filesystem of shared folders, to the Toolgate protocol. Parallels Shared folders use a relatively simple custom protocol which mimics VFS model of the guest OS. In Linux it uses the following command codes:

// Tg.h
#define TG_REQUEST_FS_L_GETSFLIST 0x220
#define TG_REQUEST_FS_L_GETSFPARM 0x221
#define TG_REQUEST_FS_L_ATTR 0x222
#define TG_REQUEST_FS_L_OPEN 0x223
#define TG_REQUEST_FS_L_RELEASE 0x224
#define TG_REQUEST_FS_L_READDIR 0x225
#define TG_REQUEST_FS_L_RW 0x226
#define TG_REQUEST_FS_L_REMOVE 0x227
#define TG_REQUEST_FS_L_RENAME 0x228

Each of the commands requires data buffers in specific format, also defined in prl_fs source codes. 

The shared folders hypercall protocol runs on top of a universal hypercall interface named Parallels Toolgate. Parallels Toolgate is a synthetic PCI device which is exposed to the Guest OS and supported by specialized kernel modules, also part of Parallels Tools. prl_fs talks to it by writing protocol buffers to I/O ports registered to the Toolgate device. 

On the host OS side, handlers of the Toolgate subsystem process the Shared Folder hypercall requests from the Guest OS, and translate it to the respective filesystem operations on the host. In prl_vm_app, class CSFTgRequest is responsible for high level logic of this process:

__const:000000010F820000 ; `vtable for'CSFTgRequest
__const:000000010F820000 _ZTV12CSFTgRequest dq 0                 ; offset to this
__const:000000010F820000                                         ; offset to this
__const:000000010F820000                                         ; offset to this
__const:000000010F820008                 dq offset _ZTI12CSFTgRequest ; `typeinfo for'CSFTgRequest
__const:000000010F820010 off_10F820010   dq offset sub_10F2D5440 ; DATA XREF: sub_10F2D51B0+4â†‘o
__const:000000010F820018                 dq offset sub_10F2D5450
__const:000000010F820020                 dq offset CSFTgRequest_handler
__const:000000010F820028                 dq offset sub_10F2D51D0

The CSFTgRequest_handler contains a switch which handles various protocol commands of the Shared Folders protocol:

... skipped ...
parsing:
  Status = 0xF0000003;
  switch ( command )
  {
    case 0x200:
      _InterlockedExchangeAdd64((volatile signed __int64 *)(*(&qword_10FAD6A10 + 1) + 240), 1uLL);
      if ( (unsigned __int16)get_bufcount((__int64)a3_req) == 1 )
      {
        a3 = 0LL;
        v12 = get_object((__int64)a3_req, 0, 1);
        if ( v12 )
        {
          a3 = (__int64)v12;
          v13 = TG_REQUEST_FS_GETLIST(&(*a2_obj)[12], v12);
          goto get_out;
        }
      }
      break;
...
  case 0x223: 
      _InterlockedExchangeAdd64((volatile signed __int64 *)(*(&qword_10FAD6A10 + 27) + 240), 1uLL);
      a3 = (__int64)a3_req;
      v13 = TG_REQUEST_FS_L_OPEN(a2_obj, a3_req);
      goto get_out;
    case 0x224:
      _InterlockedExchangeAdd64((volatile signed __int64 *)(*(&qword_10FAD6A10 + 28) + 240), 1uLL);
      a3 = (__int64)a3_req;
      v13 = sub_10F2B1FC0(a2_obj, a3_req);
      goto get_out;
...

Function TG_REQUEST_FS_L_OPEN is responsible for parsing commands that open a file in shared folders. After a series of parsing the commands, the code flow ends up with MacOS API for opening files: 

...
    filetype = mode & 0xF000;
    retval = 0xF000001C;
    if ( filetype == 0x8000 )
    {
      QFile::QFile((QFile *)&v32, &v33);
      if ( !(unsigned __int8)QFile::open(&v32, v13) )
      {
        QFile::~QFile((QFile *)&v32);
        goto LABEL_50;
      }
      LODWORD(v34.var0) = (mode << 6) & 0x1000 | 2 * (_BYTE)mode & 0x40 | 2 * (_BYTE)mode & 0x20 | 2 * (_BYTE)mode & 0x10 | mode & 7 | (mode << 6) & 0x2000 | (mode << 6) & 0x4000;
      sub_10F2CA2E0(v10 + 144, a2, &v34);
      QFileDevice::close((QFileDevice *)&v32);
      QFile::~QFile((QFile *)&v32);
      goto LABEL_49;
    }
...

The issue is that nowhere between CSFTgRequest_handler and QFile::open a shared folder file path from Guest OS is sanitized for dot-dot patterns. 


	Advanced Exploitation

The Linux kernel fences off illegitimate directory traversal for the Parallels Shared folders mount point (/media/psf), which makes it impossible to trivially exploit this bug by accessing a traversed path from the Guest OS. In order to exploit the bug we will need to talk directly to the hypervisor. 

The Parallels Toolgate driver on Linux exposes a hypercall endpoint at /proc/driver/prl_tg, which is write-only for all. However it blocks requests from usermode for many commands: 

	// prltg.c
	/*
	 * requests up to TG_REQUEST_SECURED_MAX are for drivers only and are
	 * denied by guest driver if come from user space to maintain guest
	 * kernel integrity (prevent malicious code from sending FS requests)
	 * dynamically assigned requests start from TG_REQUEST_MIN_DYNAMIC
	 */
	if (src->Request <= TG_REQUEST_SECURED_MAX)
		return -EINVAL;


TG_REQUEST_SECURED_MAX is defined as 0x00007fff, which means that TG_REQUEST_FS_L_* requests cannot be sent via the /proc/driver/prl_tg endpoint. There is two ways to bypass this: 1) rebuild the Parallels Tools kernel drivers with a patch on the check, and 2) build a satellite driver that would talk to the hypervisor bypassing the check. My exploit uses the second option to avoid Guest OS reboots. 

The exploit consists of two modules: 
1) A kernel module which implements a detour hypercall interface.
2) A Python script which implements the Shared folders protocol and exploit logic. 

The exploit logic emulates Parallels Shared folders protocol over the detour hypercall interface. By exploiting the directory traversal bug in this way I drop an executable file in the user's personal folder, if it was found. 

Arbitrary code execution and VM escape is achieved by registering the planted payload binary in the user's shell scripts (.bash_profile and others, for a variety of possible shells in use). This aproach requires the user to launch Terminal app to complete the exploit. Note that user interaction is not strictly required for this attack, as there are many ways to automaticlly launch a binary planted in a user's personal folder. For example, the attacker can register the binary in LaunchAgents that will be executed on the user's login, or even drop it in Caches where it may be picked up automatically by some software updater. For this exploit I require user interaction to avoid time delays.


	Exploit prerequisites

* Parallels Desktop for Mac v16.1.3.
* Guest OS: Ubuntu Linux v20.04.2.0 x64 (stock + latest).
* Host OS: MacOS.
* Parallels Tools v16.1.3 must be installed in the Guest VM.
IMPORTANT: install or reinstall Parallels Tools after the system upgrade.
* At least one Parallels Shared folder must be exposed to the Guest VM, writeable, and physically located anywhere in the user's personal directory on Mac (/Users/username/...)


	How to run the attack 

The attack consists of four stages.

Stage 0: Set up.
Stage 1: Install the helper kernel module. 
Stage 2: Attack the vulnerability.
Stage 3: User must launch the Terminal on Mac. 

Stages 1-2 are automated in the shell script doit.sh. 

Attacker's steps:

0) Set up.
sudo apt-get update 
sudo apt-get install build-essential linux-headers-$(uname -r)
dmesg -w 

Note: these steps would be done manually to avoid undefined delays due to Ubuntu updater. 
The exploit kernel module will print some hypercall protocol dumps in kern.log, so we open a separate terminal window with dmesg. 

1 & 2) Run the exploit 
./doit.sh 

Note: root privs will be requested to install the exploit's kernel module.
If successful, it will drop a binary named '.pwn2owned' in the user's home directory on Mac.

3) Go to Mac OS host, and launch the Terminal application. 

If successful, a "PWNED!" message will be printed in the Terminal, and the Calculator application will be launched on Mac. 
